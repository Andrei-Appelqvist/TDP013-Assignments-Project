{"ast":null,"code":"var _jsxFileName = \"/home/andmo435/Desktop/TDP013/gittat/Projekt/client/src/components/dashboard/Dashboard.js\";\nimport React, { Fragment, useEffect } from 'react'; //import {Link} from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getCurrentProfile } from '../../actions/profile';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Label } from 'reactstrap';\nimport Posts from './posts';\n\nconst Dashboard = ({\n  getCurrentProfile,\n  auth: {\n    user\n  },\n  profile: {\n    profile,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getCurrentProfile();\n  }, [getCurrentProfile]);\n  return loading && profile === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Dashboard\"), React.createElement(Container, {\n    className: \"no-idea-what-to-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dash-box1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), \" \", user && user.name), profile !== null ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"has\"), React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \" Friends \"), React.createElement(\"div\", {\n    className: \"friend-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"dash-box2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"posting-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"post-box\",\n    type: \"text\",\n    name: \"post\",\n    placeholder: \"post something!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \" Posts \"), React.createElement(\"div\", {\n    className: \"place-for-posts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Posts, {\n    post: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }))))));\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getCurrentProfile\n})(Dashboard);","map":{"version":3,"sources":["/home/andmo435/Desktop/TDP013/gittat/Projekt/client/src/components/dashboard/Dashboard.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","getCurrentProfile","Container","Label","Posts","Dashboard","auth","user","profile","loading","name","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Fragment, useEffect} from 'react';\n//import {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport {getCurrentProfile} from '../../actions/profile';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Label} from 'reactstrap';\nimport Posts from './posts';\n\n\nconst Dashboard = ({getCurrentProfile, auth:{user}, profile:{profile, loading}}) => {\n  useEffect(() => {\n    getCurrentProfile();\n  },[getCurrentProfile]);\n\n  return loading && profile === null ? <Spinner/> : <Fragment>\n    <h1 className=\"large text-primary\">\n      Dashboard\n    </h1>\n\n    <Container className=\"no-idea-what-to-name\">\n\n    <div className=\"dash-box1\">\n\n    <p className=\"lead\"><i className=\"fas fa-user\"></i> {user &&user.name}</p>\n    {profile !== null ? <Fragment></Fragment> : <Fragment>has\n    </Fragment>}\n\n    <Label> Friends </Label>\n    <div className=\"friend-box\">\n\n    </div>\n    </div>\n\n    <div className=\"dash-box2\">\n    <form className=\"posting-box\">\n      <input className=\"post-box\" type=\"text\" name=\"post\" placeholder=\"post something!\"/>\n    </form>\n\n    <Label> Posts </Label>\n    <div className=\"place-for-posts\">\n      <Fragment>\n        <Posts post={profile}/>\n      </Fragment>\n    </div>\n\n    </div>\n      </Container>\n  </Fragment>;\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\n\nexport default connect(mapStateToProps, {getCurrentProfile})(Dashboard);\n"]},"metadata":{},"sourceType":"module"}