{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, PROFILE_ERROR, CLEAR_PROFILE, GET_PROFILES, GET_POSTS, ADD_POST, ADD_FRIEND_ERROR, ADD_FRIEND_SUCCESS, DELETE_POST } from './types'; //Get current user profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  //dispatch({ type: CLEAR_PROFILE });\n  try {\n    const res = await axios.get('/api/profile/');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get(\"/api/profile/user/\".concat(userId));\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get posts\n\nexport const getPosts = profileId => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get(\"/api/profile/post/\".concat(profileId));\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const addProfile = profileId => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/profile/friend/\".concat(profileId));\n    dispatch({\n      type: ADD_FRIEND_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_FRIEND_ERROR,\n      payload: res.data\n    });\n  }\n}; //Add posts\n\nexport const addPost = (profileId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/profile/post/\".concat(profileId), formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Create profile\n\nexport const createProfile = (formData = {}, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('api/profile', {}, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Profile Created'), 'success');\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/alexander/tdp013/Projekt/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","CLEAR_PROFILE","GET_PROFILES","GET_POSTS","ADD_POST","ADD_FRIEND_ERROR","ADD_FRIEND_SUCCESS","DELETE_POST","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getProfiles","getProfileById","userId","getPosts","profileId","addProfile","put","addPost","formData","config","headers","post","createProfile","history","edit","push","errors","forEach","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert';\n\nimport{\n  GET_PROFILE,\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  GET_PROFILES,\n  GET_POSTS,\n  ADD_POST,\n  ADD_FRIEND_ERROR,\n  ADD_FRIEND_SUCCESS,\n  DELETE_POST\n}from './types';\n\n\n//Get current user profile\nexport const getCurrentProfile = () => async dispatch => {\n  try{\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  }catch(err){\n    dispatch({\n      type: PROFILE_ERROR,\n      payload:{msg: err.response.statusText, status: err.response.status}\n    });\n  }\n};\n//Get all profiles\nexport const getProfiles = () => async dispatch => {\n  //dispatch({ type: CLEAR_PROFILE });\n\n  try {\n    const res = await axios.get('/api/profile/');\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n//Get profile by ID\nexport const getProfileById = userId => async dispatch => {\n  dispatch({type: CLEAR_PROFILE});\n  try{\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  }catch(err){\n    dispatch({\n      type: PROFILE_ERROR,\n      payload:{msg: err.response.statusText, status: err.response.status}\n    });\n  }\n};\n\n//Get posts\nexport const getPosts = profileId => async dispatch => {\n  dispatch({type: CLEAR_PROFILE});\n  try{\n    const res = await axios.get(`/api/profile/post/${profileId}`);\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  }catch(err){\n    dispatch({\n      type: PROFILE_ERROR,\n      payload:{msg: err.response.statusText, status: err.response.status}\n    });\n  }\n};\n\nexport const addProfile = profileId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/profile/friend/${profileId}`);\n    dispatch({\n      type: ADD_FRIEND_SUCCESS,\n      payload: res.data\n    });\n  } catch(err){\n    dispatch({\n      type: ADD_FRIEND_ERROR,\n      payload: res.data\n    });\n  }\n}\n\n//Add posts\nexport const addPost = (profileId, formData) => async dispatch => {\n  const config = {\n    headers:{\n      'Content-Type':'application/json'\n    }\n  }\n  try{\n    const res = await axios.post(`/api/profile/post/${profileId}`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n  }catch(err){\n    dispatch({\n      type: PROFILE_ERROR,\n      payload:{msg: err.response.statusText, status: err.response.status}\n    });\n  }\n};\n\n//Create profile\nexport const createProfile = (formData = {}, history, edit = false) => async dispatch => {\n  try{\n    const config = {\n      headers:{\n        'Content-Type':'application/json'\n      }\n    }\n\n    const res = await axios.post('api/profile', {}, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Profile Created'),'success');\n    history.push('/dashboard');\n  }catch(err){\n    const errors = err.response.data.errors;\n    if(errors){\n      errors.forEach(error=> dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      payload:{msg: err.response.statusText, status: err.response.status}\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}