{"ast":null,"code":"var _jsxFileName = \"/home/andmo435/Desktop/TDP013/gittat/Projekt/client/src/components/profiles/Profiles.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport ProfileItem from './ProfileItem';\nimport { getProfiles } from '../../actions/profile';\n\nconst Profiles = ({\n  getProfiles,\n  profile: {\n    profiles,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getProfiles();\n  }, [getProfiles]);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Profiles\"), React.createElement(\"div\", {\n    className: \"profiles\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"profiles.map(profile => (\", React.createElement(ProfileItem, {\n    key: profile._id,\n    profile: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), \")\")));\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getProfiles\n})(Profiles);","map":{"version":3,"sources":["/home/andmo435/Desktop/TDP013/gittat/Projekt/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","ProfileItem","getProfiles","Profiles","profile","profiles","loading","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,WAAR,QAA0B,uBAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACD,EAAAA,WAAD;AAAcE,EAAAA,OAAO,EAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX;AAAtB,CAAD,KAAgD;AAC/DT,EAAAA,SAAS,CAAC,MAAI;AACZK,IAAAA,WAAW;AACZ,GAFQ,EAEP,CAACA,WAAD,CAFO,CAAT;AAGA,SAAQ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWI,OAAO,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACzC;AAAI,IAAA,SAAS,EAAE,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADyC,EAEzC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAEM,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEF,OAAO,CAACG,GAA1B;AAA+B,IAAA,OAAO,EAAEH,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFN,MAFyC,CAAnC,CAAR;AAQD,CAZD;;AAcAD,QAAQ,CAACK,SAAT,GAAqB;AACnBN,EAAAA,WAAW,EAAEJ,SAAS,CAACW,IAAV,CAAeC,UADT;AAEnBN,EAAAA,OAAO,EAAEN,SAAS,CAACa,MAAV,CAAiBD;AAFP,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCT,EAAAA,OAAO,EAAES,KAAK,CAACT;AADiB,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACa,eAAD,EAAkB;AAACV,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,QAAxC,CAAf","sourcesContent":["import React, {Fragment, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport ProfileItem from './ProfileItem';\nimport {getProfiles} from '../../actions/profile';\n\nconst Profiles = ({getProfiles, profile:{profiles, loading}}) => {\n  useEffect(()=>{\n    getProfiles();\n  },[getProfiles]);\n  return (<Fragment>{loading ? <Spinner /> : <Fragment>\n    <h1 className =\"large text-primary\">Profiles</h1>\n    <div className=\"profiles\">\n      profiles.map(profile => (\n          <ProfileItem key={profile._id} profile={profile}/>\n        )\n    </div>\n    </Fragment>}</Fragment>);\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {getProfiles})(Profiles);\n"]},"metadata":{},"sourceType":"module"}